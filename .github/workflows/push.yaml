name: PlatformIO CI

on: 
  pull_request:
  push:
    branches: 
      - main

jobs:
  vue-build:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          cache: 'npm'

      - run: |
          REV=`git rev-parse HEAD | rev | cut -c 1-6 | rev`
          echo "VUE_APP_BUILD=..$REV" >> .env.production
          cat .env.production

      - run: npm install
      - run: npm run build 
                
      - uses: EndBug/add-and-commit@v9 # You can change this to use a specific version. https://github.com/marketplace/actions/add-commit
        with:
          add: 'dist'
          author_name: GitHub Action
          author_email: mp-se@noreply.github.com
          default_author: github_actor
          message: 'GitHub Action Build'
          pathspec_error_handling: ignore

      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=mpse2/brewlogger-web
          VERSION=latest
          SHORTREF=${GITHUB_SHA::8}

          # If this is git tag, use the tag name as a docker tag
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION},${DOCKER_IMAGE}:${SHORTREF}"

          # If the VERSION looks like a version number, assume that
          # this is the most recent version of the image and also
          # tag it 'latest'.
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:latest"
          fi

          # Set output parameters.
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=docker_image::${DOCKER_IMAGE}

          echo $GITHUB_REF, $SHORTREF, $VERSION, $TAGS

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v3
        with:
          image: tonistiigi/binfmt:latest
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build
        uses: docker/build-push-action@v5
        with:
          builder: ${{ steps.buildx.outputs.name }}
          #context: ./service-web
          #file: ./service-web/Dockerfile
          context: ./
          file: ./Dockerfile
          platforms: linux/amd64, linux/arm64/v8
          push: true
          tags: ${{ steps.prep.outputs.tags }}

      # - name: Run Trivy vulnerability scanner
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: 'docker.io/mpse2/brewlogger:latest'
      #     format: 'template'
      #     template: '@/contrib/sarif.tpl'
      #     output: 'trivy-results.sarif'
      #     severity: 'HIGH,CRITICAL'

      # - name: 'Upload Artifact'
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: 'trivy-results.sarif'
      #     path: 'trivy-results.sarif'
      #     retention-days: 5

      # - name: Upload Trivy scan results to GitHub Security tab
      #   uses: github/codeql-action/upload-sarif@v2
      #   with:
      #     sarif_file: 'trivy-results.sarif'

